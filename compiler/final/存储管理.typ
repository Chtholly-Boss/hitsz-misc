#import "utils.typ":*

= 运行时存储管理

本部分对应教材 Chapter 9，以概念考察为主要形式。

#clues.example(title: "Concepts")[
  #show strong: set text(blue)
  - 静态策略：*编译期*即可做出决定的策略
    - 静态存储分配即在编译期确定程序运行时所需内存的大小，安排好运行时的全部数据空间，并能确定每个数据项的地址
  - 动态策略：*运行时*才能做出决定的策略
  - x 的声明的作用域：程序中的一段*区域*， 在该区域中，x 的*引用* 均指向 x 的*这一声明*
  - 时间局部性：某个程序访问的*内存位置*有可能在很短时间内被再次访问
  - 空间局部性：某个程序访问的*内存的邻近位置*有可能在很短时间内被再次访问
  - 内存泄露：一直*不能删除*不再被引用的数据
  - 悬空引用：*引用已被删除*的数据
]

#figure(
  image("./assets/活动记录.png"),
  caption: [
    活动记录，摘自 PPT，其中，形式单元为存放形参的局部变量，静态链（访问链）用来访问存放在其他活动记录的非局部数据，动态链（控制链）用来指向调用者的活动记录。
  ]
) 



#ex([
  - (2023深圳) 调用序列是指 #ans([负责分配活动记录，并将相关信息填入活动记录中的代码序列])
  - (2023深圳) 返回序列是指 #ans([负责恢复机器状态，使调用过程继续执行的代码序列])
])
